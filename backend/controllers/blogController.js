const asyncHandler = require("express-async-handler");
const mongoose = require("mongoose");

const BlogModel = require("../models/BlogModel");
const UserModel = require("../models/UserModel");

// @desc    Get all blog for seeing to anyone
// @route   GET /api/blogs/all/
// @access  Public
const getAllBlogs = asyncHandler(async (req, res) => {
	const { pageNo } = req.query || 1;
	//documents per page
	const DPP = 10;
	var totalPages = await BlogModel.estimatedDocumentCount();
	totalPages = Math.ceil(totalPages / DPP);
	// console.log("actual req to page--", pageNo - 1);
	const blogs = await BlogModel.find()
		.sort({ updatedAt: -1 })
		.limit(DPP)
		.skip((pageNo - 1) * DPP);
	// console.log("blogs--", blogs);
	res.status(200).json({ totalPages, blogs });
});

//as below/thses endpointes are protectde no  extra work here..

// @desc    Get blogs
// @route   GET /api/blogs/
// @access  Private
const getUserBlogs = asyncHandler(async (req, res) => {
	const blogs = await BlogModel.find({ userId: req.userId }).sort({
		updatedAt: -1,
	});
	res.status(200).json(blogs);
});

// @desc    Set blog
// @route   POST /api/blogs
// @access  Private
const addBlog = asyncHandler(async (req, res) => {
	// console.log("image in controller--", req.body.image);
	const { title, description, image } = req.body;
	const userId = req.userId;
	if (!title || !description || !image) {
		res.status(400);
		throw new Error("Please fill all field of blog");
	}
	let existingUser = await UserModel.findById(userId);
	const blog = new BlogModel({
		title,
		description,
		image,
		userId,
		creator: existingUser.name,
	});
	try {
		//create sessoin with db
		const session = await mongoose.startSession();
		//start trasanction
		session.startTransaction();
		//save blog to blog collection
		await blog.save({ session });
		//push blog to user's blogs array
		existingUser.blogs.push(blog);
		//save user to user collection
		await existingUser.save({ session });
		//commit all transaction in this session to db
		await session.commitTransaction();
	} catch (err) {
		console.log(err);
		throw new Error(err);
	}
	return res.status(200).json(blog);
});

// @desc    Update blog
// @route   PUT /api/blogs/:id
// @access  Private
const updateBlog = asyncHandler(async (req, res) => {
	const { title, description, image } = req.body;
	if (!title || !description || !image) {
		res.status(400);
		throw new Error("Please fill all field to update blog");
	}
	const blogId = req.params.id;
	const blog = await BlogModel.findById(blogId);

	if (!blog) {
		res.status(400);
		throw new Error("blog not found");
	}

	// Make sure the logged in user matches the blog user
	if (blog.userId.toString() !== req.userId) {
		res.status(401);
		throw new Error("User not authorized to do update blog");
	}

	const updatedblog = await BlogModel.findByIdAndUpdate(
		blogId,
		{
			title,
			description,
			image,
		},
		{
			new: true,
		}
	);

	res.status(200).json(updatedblog);
});

// @desc    Delete blog
// @route   DELETE /api/blogs/:id
// @access  Private
const deleteBlog = asyncHandler(async (req, res) => {
	const blogId = req.params.id;

	let blog;
	blog = await BlogModel.findByIdAndRemove(blogId).populate("userId");
	if (!blog) {
		res.status(400);
		throw new Error("blog not found to delete it");
	}
	try {
		//popute wil generate refernced model in current doc
		//meanin now blog conatin its user in it
		const { userId } = blog;
		//in this case userId is whole user generated by populate
		// Make sure the logged in user matches the blog user
		if (userId._id.toString() !== req.userId) {
			res.status(401);
			throw new Error("User not authorized to delelte");
		}
		//we can remove this blog from its array
		await userId.blogs.pull(blog);
		//save the owner of this blog after removing blog
		await userId.save();
	} catch (err) {
		console.log(err);
		res.status(400);
		throw new Error(err);
	}
	res.status(200).json({ blogId });
});

module.exports = {
	getAllBlogs,
	getUserBlogs,
	addBlog,
	updateBlog,
	deleteBlog,
};
